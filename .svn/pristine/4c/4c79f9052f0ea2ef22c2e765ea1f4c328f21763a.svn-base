package fr.istic.aco.editor.core.impl;


import fr.istic.aco.editor.core.Buffer;
import fr.istic.aco.editor.core.Clipboard;
import fr.istic.aco.editor.core.MiniEditorEngine;
import fr.istic.aco.editor.core.Selection;
import fr.istic.aco.editor.core.command.Cut;
import fr.istic.aco.editor.core.command.Insert;
import fr.istic.aco.editor.core.command.Paste;

public class MiniEditorEngineImpl implements MiniEditorEngine {

	private Buffer buffer;
	private Selection selection;
	private Clipboard clipboard;

	public MiniEditorEngineImpl() {
		this.buffer = new BufferImpl();
		this.selection = new SelectionImpl();
		this.clipboard = new ClipboardImpl();
	}

	@Override
	public Buffer getBuffer() {
		return this.buffer.clone();

	}

	@Override
	public Selection getSelection() {
		return selection;
	}

	@Override
	public Clipboard getClipboard() {
		return clipboard;
	}

	@Override
	public void engineSelect(int start, int stop) {
		selection.setBegin(start);
		selection.setEnd(stop);
		String selected = buffer.read(selection.getBegin(), selection.getEnd()) != "" ? buffer
				.read(selection.getBegin(), selection.getEnd())
				: "You are at the end of buffer";
		System.out.println("DEBUG: selecting interval [" + selection.getBegin()
				+ "," + selection.getEnd() + "].  " + selected);

	}

	@Override
	public void enginePaste() {
		buffer.write(selection.getBegin(), selection.getEnd(), clipboard.read());
		System.out.println("DEBUG: 	Paste ["
				+ buffer.read(0, buffer.getLength()) + "]");

	}

	@Override
	public void engineInsert(String insertString) {
		System.out.println("DEBUG: inserting text [" + insertString + "]");
		if (getSelection().getLength() != 0) {
			buffer.write(getSelection().getBegin(), getSelection().getEnd(),
					insertString);
		} else if (getSelection().getBegin() == 0
				&& getSelection().getEnd() == 0) {// at the beginning
			buffer.write(0, 0, insertString);
		} else if (getSelection().getBegin() > getBuffer().getLength()) {// at
																			// the
																			// end
			buffer.write(buffer.getLength(),
					buffer.getLength() + insertString.length(), insertString);

		}
		System.out.println("DEBUG: Text is: "
				+ buffer.read(0, buffer.getLength()));

	}

	@Override
	public void engineCut() {
		clipboard.write(buffer.read(selection.getBegin(), selection.getEnd()));
		buffer.write(selection.getBegin(), selection.getEnd(), "");
		System.out.println("DEBUG: Cut: Clipboard contains now "
				+ clipboard.read());

	}

	@Override
	public void engineCopy() {
		clipboard.write(buffer.read(selection.getBegin(), selection.getEnd()));
		System.out.println("DEBUG: Copy: . Clipboard contains now "
				+ clipboard.read());

	}

	@Override
	public void engineUndo(Insert insertCommand) {
		this.buffer = insertCommand.getBuffer();
		System.out.println("DEBUG: UNDO INSERT: . Buffer contains now "
				+ buffer.read(0, buffer.getLength()));
	}

	@Override
	public void engineUndo(Cut cutCommand) {
		// TODO Auto-generated method stub

	}

	@Override
	public void engineUndo(Paste pasteCommand) {
		// TODO Auto-generated method stub

	}

}
