package fr.istic.aco.editor;

import fr.istic.aco.editor.core.MiniEditorCommandInvoker;
import fr.istic.aco.editor.core.MiniEditorEngine;
import fr.istic.aco.editor.core.RecorderEngine;
import fr.istic.aco.editor.core.command.Command;
import fr.istic.aco.editor.core.command.Copy;
import fr.istic.aco.editor.core.command.Cut;
import fr.istic.aco.editor.core.command.Insert;
import fr.istic.aco.editor.core.command.Paste;
import fr.istic.aco.editor.core.command.Replay;
import fr.istic.aco.editor.core.command.Select;
import fr.istic.aco.editor.core.command.StartRecord;
import fr.istic.aco.editor.core.command.StopRecord;
import fr.istic.aco.editor.core.command.Undoable;
import fr.istic.aco.editor.core.impl.MiniEditorEngineImpl;
import fr.istic.aco.editor.core.impl.RecorderEngineImpl;

/*
 * receiver class
 */
public class MiniEditorImpl implements MiniEditor {

	private MiniEditorEngine engine;
	private MiniEditorCommandInvoker invoker;
	private RecorderEngine recordEngine;

	public MiniEditorImpl() {
		
		invoker = new MiniEditorCommandInvoker();
		engine = new MiniEditorEngineImpl();
		recordEngine = new RecorderEngineImpl();
	}

	@Override
	public String getBuffer() {
		return engine.getBuffer().read(0, engine.getBuffer().getLength());

	}

	@Override
	public String getSelection() {
		return engine.getBuffer().read(engine.getSelection().getBegin(),
				engine.getSelection().getEnd());
	}

	@Override
	public String getClipboard() {
		return engine.getClipboard().read();
	}

	@Override
	public void editorInsert(String substring) {
		Command insert = new Insert(engine, substring);
		invoker.storeAndExecute(insert);
	}

	@Override
	public void editorSelect(int start, int stop) {
		Command select = new Select(engine, start, stop);
		invoker.storeAndExecute(select);
	}

	@Override
	public void editorCopy() {
		Command copy = new Copy(engine);
		invoker.storeAndExecute(copy);
	}

	@Override
	public void editorCut() {
		Command cut = new Cut(engine);
		invoker.storeAndExecute(cut);
	}

	@Override
	public void editorPaste() {
		Command paste = new Paste(engine);
		invoker.storeAndExecute(paste);
	}

	@Override
	public void editorStartRecording() {
		int startIndex = invoker.getHistory().size();
		Command startRecord = new StartRecord(recordEngine, startIndex);
		invoker.storeAndExecute(startRecord);
		System.out.println("DEBUG: performing Record start");
	}

	@Override
	public void editorEndRecording() {
		int endIndex = invoker.getHistory().size();
		Command stopRecord = new StopRecord(recordEngine, endIndex);
		invoker.storeAndExecute(stopRecord);
		System.out.println("DEBUG: performing Record end");
	}

	@Override
	public void editorPlayRecording() {
		Command replay = new Replay(recordEngine, invoker.getHistory());
		invoker.storeAndExecute(replay);
		System.out.println("DEBUG: performing Play");
	}

	@Override
	public void editorUndo() {
		System.out.println("DEBUG: performing Undo");
		//TODO get last undoable
		Command last = invoker.getHistory().get(invoker.getHistory().size()-1);
		((Undoable) last).undo();
	}

	@Override
	public void editorRedo() {
		System.out.println("DEBUG: performing Redo");
	}

}
