package fr.istic.aco.editor.core.impl;

import fr.istic.aco.editor.core.Buffer;

public class BufferImpl implements Buffer {

	private String stringBuffer;

	public BufferImpl() {
		this.stringBuffer = new String();
	}

	@Override
	public String read(int begin, int end) {
		return stringBuffer.substring(begin, end);
	}

	@Override
	public void write(int begin, int end, String str) {
		if (str.equals("")) {
			// performing CUT operation
			this.stringBuffer = stringBuffer.substring(0, begin)
					+ stringBuffer.substring(end, stringBuffer.length());
		} else {
			String leftPart = begin <= stringBuffer.length() ? stringBuffer
					.substring(0, begin) : "";
			String rightPart = end <= stringBuffer.length() ? stringBuffer
					.substring(end, stringBuffer.length()) : "";
			this.stringBuffer = leftPart.concat(str).concat(rightPart);
		}
	}

	@Override
	public int getLength() {
		return stringBuffer.length();
	}

	@Override
	public boolean equals(Buffer buffer) {
		if (buffer instanceof BufferImpl) {
			return (buffer.read(0, buffer.getLength())).equals(this.read(0,
					this.getLength()));
		} else {
			return false;
		}
	}
}
