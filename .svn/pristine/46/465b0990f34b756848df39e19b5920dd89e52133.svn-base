package fr.istic.aco.editor.core.command.test;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import fr.istic.aco.editor.core.MiniEditorEngine;
import fr.istic.aco.editor.core.RecorderEngine;
import fr.istic.aco.editor.core.command.Command;
import fr.istic.aco.editor.core.command.Copy;
import fr.istic.aco.editor.core.command.Cut;
import fr.istic.aco.editor.core.command.Insert;
import fr.istic.aco.editor.core.command.Paste;
import fr.istic.aco.editor.core.command.RecorderCommand;
import fr.istic.aco.editor.core.command.Replay;
import fr.istic.aco.editor.core.command.Select;

public class ReplayTest {

	private RecorderCommand replay;
	private RecorderEngine mockedRecorderEngine;
	private MiniEditorEngine miniEditorEngine;
	private List<Command> history;

	private static final String TEST_STRING = "this is a test string";
	private final int START = 10;
	private final int END = 14;

	@Before
	public void setUp() throws Exception {
		mockedRecorderEngine = mock(RecorderEngine.class);
		history = new ArrayList<>();
		populateHistory();
		replay = new Replay(mockedRecorderEngine, history);
	}

	private void populateHistory() {
		history.add(new Insert(miniEditorEngine, TEST_STRING));
		history.add(new Select(miniEditorEngine, START, END));
		history.add(new Copy(miniEditorEngine));

		// add at the end
		history.add(new Select(miniEditorEngine, TEST_STRING.length(),
				TEST_STRING.length()));
		history.add(new Paste(miniEditorEngine));

		history.add(new Select(miniEditorEngine, START, END));
		history.add(new Cut(miniEditorEngine));

		// add at the beginning
		history.add(new Select(miniEditorEngine, 0, 0));
		history.add(new Paste(miniEditorEngine));

	}

	@Test
	public void testExecute() {
		replay.execute();
		verify(mockedRecorderEngine).replay(history);
	}
}
