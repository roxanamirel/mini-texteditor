package fr.istic.aco.editor.core.test;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import fr.istic.aco.editor.core.Buffer;
import fr.istic.aco.editor.core.MiniEditorEngine;

import fr.istic.aco.editor.core.impl.BufferImpl;
import fr.istic.aco.editor.core.impl.MiniEditorEngineImpl;



public class MiniEditorEngineTest {

	private MiniEditorEngine engine;
	private MiniEditorEngineImpl mockedEngine;


	private static final String TEST_STRING = "this is a test string";

	@Before
	public void setUp() throws Exception {
		engine = new MiniEditorEngineImpl();
		mockedEngine = new MiniEditorEngineImpl();
		
	}

	@Test
	public void testForNotNullAfterInitialization() {
		assertNotNull(engine);
		assertNotNull(engine.getBuffer());
		assertNotNull(engine.getClipboard());
		assertNotNull(engine.getSelection());
	}

	@Test
	public void testEngineSelect() {
		int start = 3;
		int stop = 5;
		engine.engineInsert(TEST_STRING);
		engine.engineSelect(start, stop);
		assertEquals(Math.abs(stop - start), engine.getSelection().getLength());
	}

	@Test
	public void testEngineInitialInsert() {
		engine.engineInsert(TEST_STRING);
		assertEquals(TEST_STRING,
				engine.getBuffer().read(0, engine.getBuffer().getLength()));
	}

	@Test
	public void testEngineCopy() {
		mockedEngine.getBuffer().write(0, TEST_STRING.length(), TEST_STRING);
		Buffer oldBuffer = new BufferImpl();
		oldBuffer.write(0, TEST_STRING.length(), TEST_STRING);
		int begin = 2;
		int end = 5;
		mockedEngine.getSelection().setBegin(begin);
		mockedEngine.getSelection().setEnd(end);
		mockedEngine.engineCopy();
		assertEquals("is ", (mockedEngine.getClipboard().read()));
		assertTrue(oldBuffer.equals(mockedEngine.getBuffer()));
	}

	@Test
	public void testEngineCut() {
		mockedEngine.getBuffer().write(0, TEST_STRING.length(), TEST_STRING);
		Buffer oldBuffer = new BufferImpl();
		oldBuffer.write(0, TEST_STRING.length(), TEST_STRING);
		int begin = 2;
		int end = 5;
		mockedEngine.getSelection().setBegin(begin);
		mockedEngine.getSelection().setEnd(end);
		mockedEngine.engineCut();
		assertEquals("is ", (mockedEngine.getClipboard().read()));
		assertFalse(oldBuffer.equals(mockedEngine.getBuffer()));
	}
	@Test
	public void testEnginePaste() {
		mockedEngine.getBuffer().write(0, TEST_STRING.length(), TEST_STRING);
		int begin = 2;
		int end = 5;
		mockedEngine.getSelection().setBegin(begin);
		mockedEngine.getSelection().setEnd(end);
		mockedEngine.engineCut();
		mockedEngine.getSelection().setBegin(begin+1);
		mockedEngine.getSelection().setEnd(end+1);
		mockedEngine.enginePaste();
		assertEquals("is ", (mockedEngine.getClipboard().read()));
		assertFalse(mockedEngine.getBuffer().equals(TEST_STRING));
		
	}

}
